1719767161
ijeqzL8hUX%3A3432b7af32f44ebd1dc6818794a94733-9c762d5cd739d7c34ce80be033929127
s:24456:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6MzQ6IlRlbXBsYXRlIGZvciB0aGUgbWVtYmVycyBkaXJlY3RvcnkiO3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6MTEzOiJUaGlzIHRlbXBsYXRlIGNhbiBiZSBvdmVycmlkZGVuIGJ5IGNvcHlpbmcgaXQgdG8geW91cnRoZW1lL3VsdGltYXRlLW1lbWJlci90ZW1wbGF0ZXMvbWVtYmVycy5waHAKClBhZ2U6ICJNZW1iZXJzIiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjI6e2k6MDtPOjQ2OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xWZXJzaW9uIjozOntzOjc6IgAqAG5hbWUiO3M6NzoidmVyc2lvbiI7czo1NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFZlcnNpb24AdmVyc2lvbiI7czo1OiIyLjYuMyI7czoxNDoiACoAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6MDoiIjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX19aToxO086NDM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFZhcl8iOjQ6e3M6MTU6IgAqAHZhcmlhYmxlTmFtZSI7czo0OiJhcmdzIjtzOjc6IgAqAHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBcnJheV8iOjM6e3M6MTI6IgAqAHZhbHVlVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6MTA6IgAqAGtleVR5cGUiO047czoxNzoiACoAZGVmYXVsdEtleVR5cGUiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb21wb3VuZCI6MTp7czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb21wb3VuZAB0eXBlcyI7YToyOntpOjA7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXFN0cmluZ18iOjA6e31pOjE7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEludGVnZXIiOjA6e319fX1zOjc6IgAqAG5hbWUiO3M6MzoidmFyIjtzOjE0OiIAKgBkZXNjcmlwdGlvbiI7Tzo0NToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uIjoyOntzOjU5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAGJvZHlUZW1wbGF0ZSI7czowOiIiO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fX19czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBjb250ZXh0IjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dCI6Mjp7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0AG5hbWVzcGFjZSI7czowOiIiO3M6NTY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dABuYW1lc3BhY2VBbGlhc2VzIjthOjA6e319czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MjtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVTdGFydCI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZUVuZCI7YjowO31zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjljNzYyZDVjZDczOWQ3YzM0Y2U4MGJlMDMzOTI5MTI3IjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTE6Im1lbWJlcnMucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6MjE6InRlbXBsYXRlcy9tZW1iZXJzLnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6MTUzMTU6Ijw/cGhwCi8qKgogKiBUZW1wbGF0ZSBmb3IgdGhlIG1lbWJlcnMgZGlyZWN0b3J5CiAqCiAqIFRoaXMgdGVtcGxhdGUgY2FuIGJlIG92ZXJyaWRkZW4gYnkgY29weWluZyBpdCB0byB5b3VydGhlbWUvdWx0aW1hdGUtbWVtYmVyL3RlbXBsYXRlcy9tZW1iZXJzLnBocAogKgogKiBQYWdlOiAiTWVtYmVycyIKICoKICogQHZlcnNpb24gMi42LjMKICoKICogQHZhciBhcnJheSAkYXJncwogKi8KaWYgKCAhIGRlZmluZWQoICdBQlNQQVRIJyApICkgewoJZXhpdDsKfQoKZ2xvYmFsICRwb3N0OwoKLy8gR2V0IGRlZmF1bHQgYW5kIHJlYWwgYXJndW1lbnRzCiRkZWZfYXJncyA9IGFycmF5KCk7CmZvcmVhY2ggKCBVTSgpLT5jb25maWcoKS0+Y29yZV9kaXJlY3RvcnlfbWV0YVsnbWVtYmVycyddIGFzICRrID0+ICR2ICkgewoJJGtleSA9IHN0cl9yZXBsYWNlKCAnX3VtXycsICcnLCAkayApOwoJJGRlZl9hcmdzWyAka2V5IF0gPSAkdjsKfQoKJHVuaXF1ZV9oYXNoID0gc3Vic3RyKCBtZDUoICRhcmdzWydmb3JtX2lkJ10gKSwgMTAsIDUgKTsKCiRhcmdzID0gYXJyYXlfbWVyZ2UoICRkZWZfYXJncywgJGFyZ3MgKTsKCi8vY3VycmVudCB1c2VyIHByaW9yaXR5IHJvbGUKJHByaW9yaXR5X3VzZXJfcm9sZSA9IGZhbHNlOwppZiAoIGlzX3VzZXJfbG9nZ2VkX2luKCkgKSB7CgkkcHJpb3JpdHlfdXNlcl9yb2xlID0gVU0oKS0+cm9sZXMoKS0+Z2V0X3ByaW9yaXR5X3VzZXJfcm9sZSggdW1fdXNlciggJ0lEJyApICk7Cn0KCiRhcmdzID0gYXBwbHlfZmlsdGVycyggJ3VtX21lbWJlcl9kaXJlY3RvcnlfYWdydW1lbnRzX29uX2xvYWQnLCAkYXJncyApOwoKLy8gVmlld3MKJHNpbmdsZV92aWV3ID0gZmFsc2U7CiRjdXJyZW50X3ZpZXcgPSAnZ3JpZCc7CgppZiAoICEgZW1wdHkoICRhcmdzWyd2aWV3X3R5cGVzJ10gKSAmJiBpc19hcnJheSggJGFyZ3NbJ3ZpZXdfdHlwZXMnXSApICkgewoJJGFyZ3NbJ3ZpZXdfdHlwZXMnXSA9IGFycmF5X2ZpbHRlciggJGFyZ3NbJ3ZpZXdfdHlwZXMnXSwgZnVuY3Rpb24oICRpdGVtICkgewoJCXJldHVybiBpbl9hcnJheSggJGl0ZW0sIGFycmF5X2tleXMoIFVNKCktPm1lbWJlcl9kaXJlY3RvcnkoKS0+dmlld190eXBlcyApICk7Cgl9KTsKfQoKaWYgKCBlbXB0eSggJGFyZ3NbJ3ZpZXdfdHlwZXMnXSApIHx8ICEgaXNfYXJyYXkoICRhcmdzWyd2aWV3X3R5cGVzJ10gKSApIHsKCSRhcmdzWyd2aWV3X3R5cGVzJ10gPSBhcnJheSgKCQknZ3JpZCcsCgkJJ2xpc3QnCgkpOwp9CgppZiAoIGNvdW50KCAkYXJnc1sndmlld190eXBlcyddICkgPT0gMSApIHsKCSRzaW5nbGVfdmlldyA9IHRydWU7CgkkY3VycmVudF92aWV3ID0gJGFyZ3NbJ3ZpZXdfdHlwZXMnXVswXTsKCSRkZWZhdWx0X3ZpZXcgPSAkY3VycmVudF92aWV3Owp9IGVsc2UgewoJJGFyZ3NbJ2RlZmF1bHRfdmlldyddID0gISBlbXB0eSggJGFyZ3NbJ2RlZmF1bHRfdmlldyddICkgPyAkYXJnc1snZGVmYXVsdF92aWV3J10gOiAkYXJnc1sndmlld190eXBlcyddWzBdOwoJJGRlZmF1bHRfdmlldyA9ICRhcmdzWydkZWZhdWx0X3ZpZXcnXTsKCSRjdXJyZW50X3ZpZXcgPSAoICEgZW1wdHkoICRfR0VUWyAndmlld190eXBlXycgLiAkdW5pcXVlX2hhc2ggXSApICYmIGluX2FycmF5KCAkX0dFVFsgJ3ZpZXdfdHlwZV8nIC4gJHVuaXF1ZV9oYXNoIF0sICRhcmdzWyd2aWV3X3R5cGVzJ10gKSApID8gc2FuaXRpemVfdGV4dF9maWVsZCggJF9HRVRbICd2aWV3X3R5cGVfJyAuICR1bmlxdWVfaGFzaCBdICkgOiAkYXJnc1snZGVmYXVsdF92aWV3J107Cn0KCi8vIFNvcnRpbmcKJGRlZmF1bHRfc29ydGluZyA9ICEgZW1wdHkoICRhcmdzWydzb3J0YnknXSApID8gJGFyZ3NbJ3NvcnRieSddIDogJ3VzZXJfcmVnaXN0ZXJlZF9kZXNjJzsKaWYgKCAkZGVmYXVsdF9zb3J0aW5nID09ICdvdGhlcicgJiYgISBlbXB0eSggJGFyZ3NbJ3NvcnRieV9jdXN0b20nXSApICkgewoJJGRlZmF1bHRfc29ydGluZyA9ICRhcmdzWydzb3J0YnlfY3VzdG9tJ107Cn0KCiRzb3J0X2Zyb21fdXJsID0gJyc7CiRjdXN0b21fc29ydGluZ190aXRsZXMgPSBhcnJheSgpOwppZiAoICEgZW1wdHkoICRhcmdzWydlbmFibGVfc29ydGluZyddICkgKSB7Cgkkc29ydGluZ19vcHRpb25zID0gZW1wdHkoICRhcmdzWydzb3J0aW5nX2ZpZWxkcyddICkgPyBhcnJheSgpIDogJGFyZ3NbJ3NvcnRpbmdfZmllbGRzJ107CgoJJHNvcnRpbmdfb3B0aW9uc19wcmVwYXJlZCA9IGFycmF5KCk7CglpZiAoICEgZW1wdHkoICRzb3J0aW5nX29wdGlvbnMgKSApIHsKCQlmb3JlYWNoICggJHNvcnRpbmdfb3B0aW9ucyBhcyAkb3B0aW9uICkgewoJCQlpZiAoIGlzX2FycmF5KCAkb3B0aW9uICkgKSB7CgkJCQkkb3B0aW9uX2tleXMgPSBhcnJheV9rZXlzKCAkb3B0aW9uICk7CgkJCQkkc29ydGluZ19vcHRpb25zX3ByZXBhcmVkW10gPSAkb3B0aW9uX2tleXNbMF07CgoJCQkJJGN1c3RvbV9zb3J0aW5nX3RpdGxlc1sgJG9wdGlvbl9rZXlzWzBdIF0gPSAkb3B0aW9uWyAkb3B0aW9uX2tleXNbMF0gXTsKCQkJfSBlbHNlIHsKCQkJCSRzb3J0aW5nX29wdGlvbnNfcHJlcGFyZWRbXSA9ICRvcHRpb247CgkJCX0KCQl9Cgl9CgoJJGFsbF9zb3J0aW5nX29wdGlvbnMgPSBVTSgpLT5tZW1iZXJfZGlyZWN0b3J5KCktPnNvcnRfZmllbGRzOwoKCWlmICggISBpbl9hcnJheSggJGRlZmF1bHRfc29ydGluZywgJHNvcnRpbmdfb3B0aW9uc19wcmVwYXJlZCApICkgewoJCSRzb3J0aW5nX29wdGlvbnNfcHJlcGFyZWRbXSA9ICRkZWZhdWx0X3NvcnRpbmc7CgoJCSRsYWJlbCA9ICRkZWZhdWx0X3NvcnRpbmc7CgkJaWYgKCAhIGVtcHR5KCAkYXJnc1snc29ydGJ5X2N1c3RvbV9sYWJlbCddICkgJiYgJ290aGVyJyA9PSAkYXJnc1snc29ydGJ5J10gKSB7CgkJCSRsYWJlbCA9ICRhcmdzWydzb3J0YnlfY3VzdG9tX2xhYmVsJ107CgkJfSBlbHNlaWYgKCAhIGVtcHR5KCAkYWxsX3NvcnRpbmdfb3B0aW9uc1sgJGRlZmF1bHRfc29ydGluZyBdICkgKSB7CgkJCSRsYWJlbCA9ICRhbGxfc29ydGluZ19vcHRpb25zWyAkZGVmYXVsdF9zb3J0aW5nIF07CgkJfQoKCQkkbGFiZWwgPSAoICRsYWJlbCA9PSAncmFuZG9tJyApID8gX18oICdSYW5kb20nLCAndWx0aW1hdGUtbWVtYmVyJyApIDogJGxhYmVsOwoKCQkkY3VzdG9tX3NvcnRpbmdfdGl0bGVzWyAkZGVmYXVsdF9zb3J0aW5nIF0gPSAkbGFiZWw7Cgl9CgoJaWYgKCAhIGVtcHR5KCAkc29ydGluZ19vcHRpb25zX3ByZXBhcmVkICkgKSB7CgkJJHNvcnRpbmdfb3B0aW9ucyA9IGFycmF5X2ludGVyc2VjdF9rZXkoIGFycmF5X21lcmdlKCAkYWxsX3NvcnRpbmdfb3B0aW9ucywgJGN1c3RvbV9zb3J0aW5nX3RpdGxlcyApLCBhcnJheV9mbGlwKCAkc29ydGluZ19vcHRpb25zX3ByZXBhcmVkICkgKTsKCX0KCgkkc29ydGluZ19vcHRpb25zID0gYXBwbHlfZmlsdGVycyggJ3VtX21lbWJlcl9kaXJlY3RvcnlfcHJlX2Rpc3BsYXlfc29ydGluZycsICRzb3J0aW5nX29wdGlvbnMsICRhcmdzICk7Cgkkc29ydF9mcm9tX3VybCA9ICggISBlbXB0eSggJF9HRVRbICdzb3J0XycgLiAkdW5pcXVlX2hhc2ggXSApICYmIGluX2FycmF5KCBzYW5pdGl6ZV90ZXh0X2ZpZWxkKCAkX0dFVFsgJ3NvcnRfJyAuICR1bmlxdWVfaGFzaCBdICksIGFycmF5X2tleXMoICRzb3J0aW5nX29wdGlvbnMgKSApICkgPyBzYW5pdGl6ZV90ZXh0X2ZpZWxkKCAkX0dFVFsgJ3NvcnRfJyAuICR1bmlxdWVfaGFzaCBdICkgOiAkZGVmYXVsdF9zb3J0aW5nOwp9CgokY3VycmVudF9wYWdlID0gKCAhIGVtcHR5KCAkX0dFVFsgJ3BhZ2VfJyAuICR1bmlxdWVfaGFzaCBdICkgJiYgaXNfbnVtZXJpYyggJF9HRVRbICdwYWdlXycgLiAkdW5pcXVlX2hhc2ggXSApICkgPyBhYnNpbnQoICRfR0VUWyAncGFnZV8nIC4gJHVuaXF1ZV9oYXNoIF0gKSA6IDE7CgovL1NlYXJjaAokc2VhcmNoID0gaXNzZXQoICRhcmdzWydzZWFyY2gnXSApID8gJGFyZ3NbJ3NlYXJjaCddIDogZmFsc2U7CiRzaG93X3NlYXJjaCA9IGVtcHR5KCAkYXJnc1sncm9sZXNfY2FuX3NlYXJjaCddICkgfHwgKCAhIGVtcHR5KCAkcHJpb3JpdHlfdXNlcl9yb2xlICkgJiYgaW5fYXJyYXkoICRwcmlvcml0eV91c2VyX3JvbGUsICRhcmdzWydyb2xlc19jYW5fc2VhcmNoJ10gKSApOwokc2VhcmNoX2Zyb21fdXJsID0gJyc7CmlmICggJHNlYXJjaCAmJiAkc2hvd19zZWFyY2ggKSB7Cgkkc2VhcmNoX2Zyb21fdXJsID0gISBlbXB0eSggJF9HRVRbICdzZWFyY2hfJyAuICR1bmlxdWVfaGFzaCBdICkgPyBzdHJpcHNsYXNoZXMoIHNhbml0aXplX3RleHRfZmllbGQoICRfR0VUWyAnc2VhcmNoXycgLiAkdW5pcXVlX2hhc2ggXSApICkgOiAnJzsKfQoKCi8vRmlsdGVycwokZmlsdGVycyA9IGlzc2V0KCAkYXJnc1snZmlsdGVycyddICkgPyAkYXJnc1snZmlsdGVycyddIDogZmFsc2U7CiRzaG93X2ZpbHRlcnMgPSBlbXB0eSggJGFyZ3NbJ3JvbGVzX2Nhbl9maWx0ZXInXSApIHx8ICggISBlbXB0eSggJHByaW9yaXR5X3VzZXJfcm9sZSApICYmIGluX2FycmF5KCAkcHJpb3JpdHlfdXNlcl9yb2xlLCAkYXJnc1sncm9sZXNfY2FuX2ZpbHRlciddICkgKTsKJHNlYXJjaF9maWx0ZXJzID0gYXJyYXkoKTsKaWYgKCBpc3NldCggJGFyZ3NbJ3NlYXJjaF9maWVsZHMnXSApICkgewoJJHNlYXJjaF9maWx0ZXJzID0gYXBwbHlfZmlsdGVycyggJ3VtX2Zyb250ZW5kX21lbWJlcl9zZWFyY2hfZmlsdGVycycsIGFycmF5X3VuaXF1ZSggYXJyYXlfZmlsdGVyKCAkYXJnc1snc2VhcmNoX2ZpZWxkcyddICkgKSApOwp9CgppZiAoICEgZW1wdHkoICRzZWFyY2hfZmlsdGVycyApICkgewoJJHNlYXJjaF9maWx0ZXJzID0gYXJyYXlfZmlsdGVyKCAkc2VhcmNoX2ZpbHRlcnMsIGZ1bmN0aW9uKCAkaXRlbSApIHsKCQlyZXR1cm4gaW5fYXJyYXkoICRpdGVtLCBhcnJheV9rZXlzKCBVTSgpLT5tZW1iZXJfZGlyZWN0b3J5KCktPmZpbHRlcl9maWVsZHMgKSApOwoJfSk7CgoJJHNlYXJjaF9maWx0ZXJzID0gYXJyYXlfdmFsdWVzKCAkc2VhcmNoX2ZpbHRlcnMgKTsKfQoKLy8gSGlkZSBmaWx0ZXIgZmllbGRzIGJhc2VkIG9uIHRoZSBmaWVsZCB2aXNpYmlsaXR5Lgpmb3JlYWNoICggJHNlYXJjaF9maWx0ZXJzIGFzICRrZXkgPT4gJGZpbHRlciApIHsKCSRmaWx0ZXJfZGF0YSA9IFVNKCktPmZpZWxkcygpLT5nZXRfZmllbGQoICRmaWx0ZXIgKTsKCWlmICggISB1bV9jYW5fdmlld19maWVsZCggJGZpbHRlcl9kYXRhICkgKSB7CgkJdW5zZXQoICRzZWFyY2hfZmlsdGVyc1sgJGtleSBdICk7Cgl9Cn0KCi8vIENsYXNzZXMKJGNsYXNzZXMgPSAnJzsKaWYgKCAkc2VhcmNoICYmICRzaG93X3NlYXJjaCApIHsKCSRjbGFzc2VzIC49ICcgdW0tbWVtYmVyLXdpdGgtc2VhcmNoJzsKfQoKaWYgKCAkZmlsdGVycyAmJiAkc2hvd19maWx0ZXJzICYmIGNvdW50KCAkc2VhcmNoX2ZpbHRlcnMgKSApIHsKCSRjbGFzc2VzIC49ICcgdW0tbWVtYmVyLXdpdGgtZmlsdGVycyc7Cn0KCmlmICggISAkc2luZ2xlX3ZpZXcgKSB7CgkkY2xhc3NlcyAuPSAnIHVtLW1lbWJlci13aXRoLXZpZXcnOwp9CgppZiAoICEgZW1wdHkoICRhcmdzWydlbmFibGVfc29ydGluZyddICkgJiYgISBlbXB0eSggJHNvcnRpbmdfb3B0aW9ucyApICYmIGNvdW50KCAkc29ydGluZ19vcHRpb25zICkgPiAxICkgewoJJGNsYXNzZXMgLj0gJyB1bS1tZW1iZXItd2l0aC1zb3J0aW5nJzsKfQoKJGZpbHRlcnNfY29sbGFwc2libGUgPSB0cnVlOwokZmlsdGVyc19leHBhbmRlZCA9ICEgZW1wdHkoICRhcmdzWydmaWx0ZXJzX2V4cGFuZGVkJ10gKSA/IHRydWUgOiBmYWxzZTsKaWYgKCAkZmlsdGVyc19leHBhbmRlZCApIHsKCSRmaWx0ZXJzX2NvbGxhcHNpYmxlID0gISBlbXB0eSggJGFyZ3NbJ2ZpbHRlcnNfaXNfY29sbGFwc2libGUnXSApID8gdHJ1ZSA6IGZhbHNlOwp9CgovL3NlbmQgJGFyZ3MgdmFyaWFibGUgdG8gdGhlIHRlbXBsYXRlcwokYXJnc1snYXJncyddID0gJGFyZ3M7CmZvcmVhY2ggKCAkYXJnc1sndmlld190eXBlcyddIGFzICR0eXBlICkgewoJJGJhc2VuYW1lID0gVU0oKS0+bWVtYmVyX2RpcmVjdG9yeSgpLT5nZXRfdHlwZV9iYXNlbmFtZSggJHR5cGUgKTsKCVVNKCktPmdldF90ZW1wbGF0ZSggJ21lbWJlcnMtJyAuICR0eXBlIC4gJy5waHAnLCAkYmFzZW5hbWUsICRhcmdzLCB0cnVlICk7Cn0KVU0oKS0+Z2V0X3RlbXBsYXRlKCAnbWVtYmVycy1oZWFkZXIucGhwJywgJycsICRhcmdzLCB0cnVlICk7ClVNKCktPmdldF90ZW1wbGF0ZSggJ21lbWJlcnMtcGFnaW5hdGlvbi5waHAnLCAnJywgJGFyZ3MsIHRydWUgKTsKCiRtdXN0X3NlYXJjaCA9IDA7CiRub3Rfc2VhcmNoZWQgPSBmYWxzZTsKaWYgKCAoICggJHNlYXJjaCAmJiAkc2hvd19zZWFyY2ggKSB8fCAoICRmaWx0ZXJzICYmICRzaG93X2ZpbHRlcnMgJiYgY291bnQoICRzZWFyY2hfZmlsdGVycyApICkgKSAmJiBpc3NldCggJGFyZ3NbJ211c3Rfc2VhcmNoJ10gKSAmJiAkYXJnc1snbXVzdF9zZWFyY2gnXSA9PSAxICkgewoJJG11c3Rfc2VhcmNoID0gMTsKCSRub3Rfc2VhcmNoZWQgPSB0cnVlOwoJaWYgKCAkc2VhcmNoICYmICRzaG93X3NlYXJjaCAmJiAhIGVtcHR5KCAkc2VhcmNoX2Zyb21fdXJsICkgKSB7CgkJJG5vdF9zZWFyY2hlZCA9IGZhbHNlOwoJfSBlbHNlaWYgKCAkZmlsdGVycyAmJiAkc2hvd19maWx0ZXJzICYmIGNvdW50KCAkc2VhcmNoX2ZpbHRlcnMgKSApIHsKCQlmb3JlYWNoICggJHNlYXJjaF9maWx0ZXJzIGFzICRmaWx0ZXIgKSB7CgkJCS8vIGdldHRpbmcgdmFsdWUgZnJvbSBHRVQgbGluZQoJCQlzd2l0Y2ggKCBVTSgpLT5tZW1iZXJfZGlyZWN0b3J5KCktPmZpbHRlcl90eXBlc1sgJGZpbHRlciBdICkgewoJCQkJZGVmYXVsdDogewoKCQkJCQkkbm90X3NlYXJjaGVkID0gYXBwbHlfZmlsdGVycyggJ3VtX21lbWJlcl9kaXJlY3RvcnlfZmlsdGVyX3ZhbHVlX2Zyb21fdXJsJywgJG5vdF9zZWFyY2hlZCwgJGZpbHRlciApOwoKCQkJCQlicmVhazsKCQkJCX0KCQkJCWNhc2UgJ3NlbGVjdCc6IHsKCgkJCQkJLy8gZ2V0dGluZyB2YWx1ZSBmcm9tIEdFVCBsaW5lCgkJCQkJJGZpbHRlcl9mcm9tX3VybCA9ICEgZW1wdHkoICRfR0VUWyAnZmlsdGVyXycgLiAkZmlsdGVyIC4gJ18nIC4gJHVuaXF1ZV9oYXNoIF0gKSA/IGV4cGxvZGUoICd8fCcsIHNhbml0aXplX3RleHRfZmllbGQoICRfR0VUWyAnZmlsdGVyXycgLiAkZmlsdGVyIC4gJ18nIC4gJHVuaXF1ZV9oYXNoIF0gKSApIDogYXJyYXkoKTsKCgkJCQkJaWYgKCAhIGVtcHR5KCAkZmlsdGVyX2Zyb21fdXJsICkgKSB7CgkJCQkJCSRub3Rfc2VhcmNoZWQgPSBmYWxzZTsKCQkJCQl9CgoJCQkJCWJyZWFrOwoJCQkJfQoJCQkJY2FzZSAnc2xpZGVyJzogewoJCQkJCS8vIGdldHRpbmcgdmFsdWUgZnJvbSBHRVQgbGluZQoJCQkJCSRmaWx0ZXJfZnJvbV91cmwgPSAhIGVtcHR5KCAkX0dFVFsgJ2ZpbHRlcl8nIC4gJGZpbHRlciAuICdfJyAuICR1bmlxdWVfaGFzaCBdICkgPyBzYW5pdGl6ZV90ZXh0X2ZpZWxkKCAkX0dFVFsgJ2ZpbHRlcl8nIC4gJGZpbHRlciAuICdfJyAuICR1bmlxdWVfaGFzaCBdICkgOiAnJzsKCQkJCQlpZiAoICEgZW1wdHkoICRmaWx0ZXJfZnJvbV91cmwgKSApIHsKCQkJCQkJJG5vdF9zZWFyY2hlZCA9IGZhbHNlOwoJCQkJCX0KCgkJCQkJYnJlYWs7CgkJCQl9CgkJCQljYXNlICdkYXRlcGlja2VyJzoKCQkJCWNhc2UgJ3RpbWVwaWNrZXInOiB7CgkJCQkJLy8gZ2V0dGluZyB2YWx1ZSBmcm9tIEdFVCBsaW5lCgkJCQkJJGZpbHRlcl9mcm9tX3VybCA9ICEgZW1wdHkoICRfR0VUWyAnZmlsdGVyXycgLiAkZmlsdGVyIC4gJ19mcm9tXycgLiAkdW5pcXVlX2hhc2ggXSApID8gc2FuaXRpemVfdGV4dF9maWVsZCggJF9HRVRbICdmaWx0ZXJfJyAuICRmaWx0ZXIgLiAnX2Zyb21fJyAuICR1bmlxdWVfaGFzaCBdICkgOiAnJzsKCQkJCQlpZiAoICEgZW1wdHkoICRmaWx0ZXJfZnJvbV91cmwgKSApIHsKCQkJCQkJJG5vdF9zZWFyY2hlZCA9IGZhbHNlOwoJCQkJCX0KCgkJCQkJYnJlYWs7CgkJCQl9CgkJCX0KCQl9Cgl9Cn0KCiRwb3N0aWQgPSAhIGVtcHR5KCAkcG9zdC0+SUQgKSA/ICRwb3N0LT5JRCA6ICcnOwo/PgoKPGRpdiBjbGFzcz0idW0gPD9waHAgZWNobyBlc2NfYXR0ciggJHRoaXMtPmdldF9jbGFzcyggJG1vZGUgKSApOyA/PiB1bS08P3BocCBlY2hvIGVzY19hdHRyKCBzdWJzdHIoIG1kNSggJGZvcm1faWQgKSwgMTAsIDUgKSApOyA/PiIKICAgICBkYXRhLWhhc2g9Ijw/cGhwIGVjaG8gZXNjX2F0dHIoIHN1YnN0ciggbWQ1KCAkZm9ybV9pZCApLCAxMCwgNSApICkgPz4iIGRhdGEtYmFzZS1wb3N0PSI8P3BocCBlY2hvIGVzY19hdHRyKCAkcG9zdGlkICkgPz4iCgkgZGF0YS1tdXN0LXNlYXJjaD0iPD9waHAgZWNobyBlc2NfYXR0ciggJG11c3Rfc2VhcmNoICk7ID8+IiBkYXRhLXNlYXJjaGVkPSI8P3BocCBlY2hvICRub3Rfc2VhcmNoZWQgPyAnMCcgOiAnMSc7ID8+IgoJIGRhdGEtdmlld190eXBlPSI8P3BocCBlY2hvIGVzY19hdHRyKCAkY3VycmVudF92aWV3ICkgPz4iIGRhdGEtcGFnZT0iPD9waHAgZWNobyBlc2NfYXR0ciggJGN1cnJlbnRfcGFnZSApID8+IgoJIGRhdGEtc29ydGluZz0iPD9waHAgZWNobyBlc2NfYXR0ciggJHNvcnRfZnJvbV91cmwgKSA/PiI+Cgk8ZGl2IGNsYXNzPSJ1bS1tZW1iZXJzLW92ZXJsYXkiPjxkaXYgY2xhc3M9InVtLWFqYXgtbG9hZGluZyI+PC9kaXY+PC9kaXY+CgoJPGRpdiBjbGFzcz0idW0tbWVtYmVyLWRpcmVjdG9yeS1oZWFkZXIgdW0tZm9ybSI+CgoJCTw/cGhwIGRvX2FjdGlvbiggJ3VtX21lbWJlcnNfZGlyZWN0b3J5X2JlZm9yZV9oZWFkJywgJGFyZ3MsICRmb3JtX2lkLCAkbm90X3NlYXJjaGVkICk7ID8+CgoJCTw/cGhwIGlmICggJHNlYXJjaCAmJiAkc2hvd19zZWFyY2ggKSB7ID8+CgkJCTxkaXYgY2xhc3M9InVtLW1lbWJlci1kaXJlY3RvcnktaGVhZGVyLXJvdyB1bS1tZW1iZXItZGlyZWN0b3J5LXNlYXJjaC1yb3ciPgoJCQkJPGRpdiBjbGFzcz0idW0tbWVtYmVyLWRpcmVjdG9yeS1zZWFyY2gtbGluZSI+CgkJCQkJPGxhYmVsPgoJCQkJCQk8c3Bhbj48P3BocCBfZSggJ1NlYXJjaDonLCAndWx0aW1hdGUtbWVtYmVyJyApOyA/Pjwvc3Bhbj4KCQkJCQkJPGlucHV0IHR5cGU9InNlYXJjaCIgY2xhc3M9InVtLXNlYXJjaC1saW5lIiBwbGFjZWhvbGRlcj0iPD9waHAgZXNjX2F0dHJfZSggJ1NlYXJjaCcsICd1bHRpbWF0ZS1tZW1iZXInICkgPz4iICB2YWx1ZT0iPD9waHAgZWNobyBlc2NfYXR0ciggJHNlYXJjaF9mcm9tX3VybCApID8+IiBhcmlhLWxhYmVsPSI8P3BocCBlc2NfYXR0cl9lKCAnU2VhcmNoJywgJ3VsdGltYXRlLW1lbWJlcicgKSA/PiIgc3BlZWNoIC8+CgkJCQkJPC9sYWJlbD4KCQkJCQk8aW5wdXQgdHlwZT0iYnV0dG9uIiBjbGFzcz0idW0tZG8tc2VhcmNoIHVtLWJ1dHRvbiIgdmFsdWU9Ijw/cGhwIGVzY19hdHRyX2UoICdTZWFyY2gnLCAndWx0aW1hdGUtbWVtYmVyJyApOyA/PiIgLz4KCQkJCTwvZGl2PgoJCQk8L2Rpdj4KCQk8P3BocCB9CgoJCWlmICggKCAhIGVtcHR5KCAkYXJnc1snZW5hYmxlX3NvcnRpbmcnXSApICYmICEgZW1wdHkoICRzb3J0aW5nX29wdGlvbnMgKSAmJiBjb3VudCggJHNvcnRpbmdfb3B0aW9ucyApID4gMSApIHx8CgkJICAgICAoICRmaWx0ZXJzICYmICRzaG93X2ZpbHRlcnMgJiYgY291bnQoICRzZWFyY2hfZmlsdGVycyApICkgfHwKCQkgICAgICEgJHNpbmdsZV92aWV3ICkgeyA/PgoJCQk8ZGl2IGNsYXNzPSJ1bS1tZW1iZXItZGlyZWN0b3J5LWhlYWRlci1yb3ciPgoJCQkJPGRpdiBjbGFzcz0idW0tbWVtYmVyLWRpcmVjdG9yeS1uYXYtbGluZSI+CgkJCQkJPD9waHAgaWYgKCAhICRzaW5nbGVfdmlldyApIHsKCQkJCQkJJHZpZXdfdHlwZXMgPSAwOwoKCQkJCQkJZm9yZWFjaCAoIFVNKCktPm1lbWJlcl9kaXJlY3RvcnkoKS0+dmlld190eXBlcyBhcyAka2V5ID0+ICR2YWx1ZSApIHsKCQkJCQkJCWlmICggaW5fYXJyYXkoICRrZXksICRhcmdzWyd2aWV3X3R5cGVzJ10gKSApIHsKCQkJCQkJCQlpZiAoIGVtcHR5KCAkdmlld190eXBlcyApICkgeyA/PgoJCQkJCQkJCQk8c3BhbiBjbGFzcz0idW0tbWVtYmVyLWRpcmVjdG9yeS12aWV3LXR5cGU8P3BocCBpZiAoICRub3Rfc2VhcmNoZWQgKSB7Pz4gdW0tZGlzYWJsZWQ8P3BocCB9ID8+Ij4KCQkJCQkJCQk8P3BocCB9CgoJCQkJCQkJCSR2aWV3X3R5cGVzKys7ID8+CgoJCQkJCQkJCTxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIKCQkJCQkJCQkgICBjbGFzcz0idW0tbWVtYmVyLWRpcmVjdG9yeS12aWV3LXR5cGUtYTw/cGhwIGlmICggISAkbm90X3NlYXJjaGVkICkgez8+IHVtLXRpcC1uPD9waHAgfSA/PiIKCQkJCQkJCQkgICBkYXRhLXR5cGU9Ijw/cGhwIGVjaG8gJGtleTsgPz4iCgkJCQkJCQkJICAgZGF0YS1kZWZhdWx0PSI8P3BocCBlY2hvICggJGRlZmF1bHRfdmlldyA9PSAka2V5ICkgPyAxIDogMDsgPz4iCgkJCQkJCQkJICAgdGl0bGU9Ijw/cGhwIHByaW50ZiggZXNjX2F0dHJfXyggJ0NoYW5nZSB0byAlcycsICd1bHRpbWF0ZS1tZW1iZXInICksICR2YWx1ZVsndGl0bGUnXSApID8+IgoJCQkJCQkJCSAgIGRlZmF1bHQtdGl0bGU9Ijw/cGhwIGVjaG8gZXNjX2F0dHIoICR2YWx1ZVsndGl0bGUnXSApOyA/PiIKCQkJCQkJCQkgICBuZXh0LWl0ZW09IiIgPjxpIGNsYXNzPSI8P3BocCBlY2hvICR2YWx1ZVsnaWNvbiddOyA/PiI+PC9pPjwvYT4KCQkJCQkJCTw/cGhwIH0KCQkJCQkJfQoKCQkJCQkJaWYgKCAhIGVtcHR5KCAkdmlld190eXBlcyApICkgeyA/PgoJCQkJCQkJPC9zcGFuPgoJCQkJCQk8P3BocCB9CgkJCQkJfQoKCQkJCQlpZiAoICEgZW1wdHkoICRhcmdzWydlbmFibGVfc29ydGluZyddICkgJiYgISBlbXB0eSggJHNvcnRpbmdfb3B0aW9ucyApICYmIGNvdW50KCAkc29ydGluZ19vcHRpb25zICkgPiAxICkgeyA/PgoJCQkJCQk8ZGl2IGNsYXNzPSJ1bS1tZW1iZXItZGlyZWN0b3J5LXNvcnRpbmciPgoJCQkJCQkJPHNwYW4+PD9waHAgX2UoICdTb3J0IGJ5OicsICd1bHRpbWF0ZS1tZW1iZXInICk7ID8+Jm5ic3A7PC9zcGFuPgoJCQkJCQkJPGRpdiBjbGFzcz0idW0tbWVtYmVyLWRpcmVjdG9yeS1zb3J0aW5nLWEiPgoJCQkJCQkJCTxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGNsYXNzPSJ1bS1tZW1iZXItZGlyZWN0b3J5LXNvcnRpbmctYS10ZXh0Ij48P3BocCBlY2hvICRzb3J0aW5nX29wdGlvbnNbICRzb3J0X2Zyb21fdXJsIF0gPz48L2E+CgkJCQkJCQkJJm5ic3A7PGkgY2xhc3M9InVtLWZhaWNvbi1jYXJldC1kb3duIj48L2k+PGkgY2xhc3M9InVtLWZhaWNvbi1jYXJldC11cCI+PC9pPgoJCQkJCQkJPC9kaXY+CgkJCQkJCTwvZGl2PgoKCQkJCQkJPD9waHAgJGl0ZW1zID0gYXJyYXkoKTsKCgkJCQkJCWZvcmVhY2ggKCAkc29ydGluZ19vcHRpb25zIGFzICR2YWx1ZSA9PiAkdGl0bGUgKSB7CgkJCQkJCQkkaXRlbXNbXSA9ICc8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLWRpcmVjdG9yeS1oYXNoPSInIC4gZXNjX2F0dHIoIHN1YnN0ciggbWQ1KCAkZm9ybV9pZCApLCAxMCwgNSApICkgLiAnIiBjbGFzcz0idW0tc29ydHluZy1ieS0nIC4gZXNjX2F0dHIoICR2YWx1ZSApIC4gJyIgZGF0YS12YWx1ZT0iJyAuIGVzY19hdHRyKCAkdmFsdWUgKSAuICciIGRhdGEtc2VsZWN0ZWQ9IicgLiAoICggJHNvcnRfZnJvbV91cmwgPT0gJHZhbHVlICkgPyAnMScgOiAnMCcgKSAuICciIGRhdGEtZGVmYXVsdD0iJyAuICggKCAkZGVmYXVsdF9zb3J0aW5nID09ICR2YWx1ZSApID8gJzEnIDogJzAnICkgLiAnIj4nIC4gJHRpdGxlIC4gJzwvYT4nOyA/PgoJCQkJCQk8P3BocCB9CgoJCQkJCQlVTSgpLT5tZW1iZXJfZGlyZWN0b3J5KCktPmRyb3Bkb3duX21lbnUoICcudW0tbWVtYmVyLWRpcmVjdG9yeS1zb3J0aW5nLWEnLCAnY2xpY2snLCAkaXRlbXMgKTsgPz4KCgkJCQkJPD9waHAgfQoKCQkJCQlpZiAoICRmaWx0ZXJzICYmICRzaG93X2ZpbHRlcnMgJiYgY291bnQoICRzZWFyY2hfZmlsdGVycyApICYmICRmaWx0ZXJzX2NvbGxhcHNpYmxlICkgeyA/PgoJCQkJCQk8c3BhbiBjbGFzcz0idW0tbWVtYmVyLWRpcmVjdG9yeS1maWx0ZXJzIj4KCQkJCQkJCTxzcGFuIGNsYXNzPSJ1bS1tZW1iZXItZGlyZWN0b3J5LWZpbHRlcnMtYTw/cGhwIGlmICggJGZpbHRlcnNfZXhwYW5kZWQgKSB7ID8+IHVtLW1lbWJlci1kaXJlY3RvcnktZmlsdGVycy12aXNpYmxlPD9waHAgfSA/PiI+CgkJCQkJCQkJPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyI+CgkJCQkJCQkJCTw/cGhwIF9lKCAnTW9yZSBmaWx0ZXJzJywgJ3VsdGltYXRlLW1lbWJlcicgKTsgPz4KCQkJCQkJCQk8L2E+CgkJCQkJCQkJJm5ic3A7PGkgY2xhc3M9InVtLWZhaWNvbi1jYXJldC1kb3duIj48L2k+PGkgY2xhc3M9InVtLWZhaWNvbi1jYXJldC11cCI+PC9pPgoJCQkJCQkJPC9zcGFuPgoJCQkJCQk8L3NwYW4+CgkJCQkJPD9waHAgfSA/PgoJCQkJPC9kaXY+CgkJCTwvZGl2PgoJCTw/cGhwIH0gPz4KCgoJCTw/cGhwIGlmICggJGZpbHRlcnMgJiYgJHNob3dfZmlsdGVycyAmJiBjb3VudCggJHNlYXJjaF9maWx0ZXJzICkgKSB7CgoJCQlpZiAoIGlzX2FycmF5KCAkc2VhcmNoX2ZpbHRlcnMgKSApIHsgPz4KCQkJCTxzY3JpcHQgdHlwZT0idGV4dC90ZW1wbGF0ZSIgaWQ9InRtcGwtdW0tbWVtYmVycy1maWx0ZXJlZC1saW5lIj4KCQkJCQk8IyBpZiAoIGRhdGEuZmlsdGVycy5sZW5ndGggPiAwICkgeyAjPgoJCQkJCQk8IyBfLmVhY2goIGRhdGEuZmlsdGVycywgZnVuY3Rpb24oIGZpbHRlciwga2V5LCBsaXN0ICkgeyAjPgoJCQkJCQkJPGRpdiBjbGFzcz0idW0tbWVtYmVycy1maWx0ZXItdGFnIj4KCQkJCQkJCQk8IyBpZiAoIGZpbHRlci50eXBlID09ICdzbGlkZXInICkgeyAjPgoJCQkJCQkJCQl7e3tmaWx0ZXIudmFsdWVfbGFiZWx9fX0KCQkJCQkJCQk8IyB9IGVsc2UgeyAjPgoJCQkJCQkJCQk8c3Ryb25nPnt7e2ZpbHRlci5sYWJlbH19fTwvc3Ryb25nPjoge3t7ZmlsdGVyLnZhbHVlX2xhYmVsfX19CgkJCQkJCQkJPCMgfSAjPgoJCQkJCQkJCTxkaXYgY2xhc3M9InVtLW1lbWJlcnMtZmlsdGVyLXJlbW92ZSB1bS10aXAtbiIgZGF0YS1uYW1lPSJ7e3tmaWx0ZXIubmFtZX19fSIKCQkJCQkJCQkgICAgIGRhdGEtdmFsdWU9Int7e2ZpbHRlci52YWx1ZX19fSIgZGF0YS1yYW5nZT0ie3t7ZmlsdGVyLnJhbmdlfX19IgoJCQkJCQkJCSAgICAgZGF0YS10eXBlPSJ7e3tmaWx0ZXIudHlwZX19fSIgdGl0bGU9Ijw/cGhwIGVzY19hdHRyX2UoICdSZW1vdmUgZmlsdGVyJywgJ3VsdGltYXRlLW1lbWJlcicgKSA/PiI+JnRpbWVzOzwvZGl2PgoJCQkJCQkJPC9kaXY+CgkJCQkJCTwjIH0pOyAjPgoJCQkJCTwjIH0gIz4KCQkJCTwvc2NyaXB0PgoKCQkJCTxkaXYgY2xhc3M9InVtLW1lbWJlci1kaXJlY3RvcnktaGVhZGVyLXJvdyB1bS1tZW1iZXItZGlyZWN0b3J5LWZpbHRlcnMtYmFyPD9waHAgaWYgKCAhICRmaWx0ZXJzX2V4cGFuZGVkICkgeyA/PiB1bS1oZWFkZXItcm93LWludmlzaWJsZTw/cGhwIH0gPz4iPgoJCQkJCTxkaXYgY2xhc3M9InVtLXNlYXJjaCB1bS1zZWFyY2gtPD9waHAgZWNobyBjb3VudCggJHNlYXJjaF9maWx0ZXJzICkgPz48P3BocCBpZiAoICEgJGZpbHRlcnNfZXhwYW5kZWQgKSB7ID8+IHVtLXNlYXJjaC1pbnZpc2libGU8P3BocCB9ID8+Ij4KCQkJCQkJPD9waHAgJGkgPSAwOwoJCQkJCQlmb3JlYWNoICggJHNlYXJjaF9maWx0ZXJzIGFzICRmaWx0ZXIgKSB7CgkJCQkJCQkkZmlsdGVyX2NvbnRlbnQgPSBVTSgpLT5tZW1iZXJfZGlyZWN0b3J5KCktPnNob3dfZmlsdGVyKCAkZmlsdGVyLCAkYXJncyApOwoJCQkJCQkJaWYgKCBlbXB0eSggJGZpbHRlcl9jb250ZW50ICkgKSB7CgkJCQkJCQkJY29udGludWU7CgkJCQkJCQl9CgoJCQkJCQkJJHR5cGUgPSBVTSgpLT5tZW1iZXJfZGlyZWN0b3J5KCktPmZpbHRlcl90eXBlc1sgJGZpbHRlciBdOyA/PgoKCQkJCQkJCTxkaXYgY2xhc3M9InVtLXNlYXJjaC1maWx0ZXIgdW0tPD9waHAgZWNobyBlc2NfYXR0ciggJHR5cGUgKSA/Pi1maWx0ZXItdHlwZSA8P3BocCBlY2hvICggJGkgIT0gMCAmJiAkaSUyICE9PSAwICkgPyAndW0tc2VhcmNoLWZpbHRlci0yJyA6ICcnID8+Ij4KCQkJCQkJCQk8P3BocCBlY2hvICRmaWx0ZXJfY29udGVudDsgPz4KCQkJCQkJCTwvZGl2PgoKCQkJCQkJCTw/cGhwICRpKys7CgkJCQkJCX0gPz4KCQkJCQk8L2Rpdj4KCQkJCTwvZGl2PgoJCQkJPGRpdiBjbGFzcz0idW0tbWVtYmVyLWRpcmVjdG9yeS1oZWFkZXItcm93Ij4KCQkJCQk8ZGl2IGNsYXNzPSJ1bS1maWx0ZXJlZC1saW5lIj4KCQkJCQkJPGRpdiBjbGFzcz0idW0tY2xlYXItZmlsdGVycyI+PGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgY2xhc3M9InVtLWNsZWFyLWZpbHRlcnMtYSIgdGl0bGU9Ijw/cGhwIGVzY19hdHRyX2UoICdSZW1vdmUgYWxsIGZpbHRlcnMnLCAndWx0aW1hdGUtbWVtYmVyJyApID8+Ij48P3BocCBfZSggJ0NsZWFyIGFsbCcsICd1bHRpbWF0ZS1tZW1iZXInICk7ID8+PC9hPjwvZGl2PgoJCQkJCTwvZGl2PgoJCQkJPC9kaXY+CgkJCQk8P3BocAoJCQl9CgkJfQoJCWRvX2FjdGlvbiggJ3VtX21lbWJlcnNfZGlyZWN0b3J5X2hlYWQnLCAkYXJncywgJGZvcm1faWQsICRub3Rfc2VhcmNoZWQgKTsgPz4KCTwvZGl2PgoKCTxkaXYgY2xhc3M9InVtLW1lbWJlcnMtd3JhcHBlciI+PC9kaXY+CgoJPGRpdiBjbGFzcz0idW0tbWVtYmVycy1wYWdpbmF0aW9uLWJveCI+PC9kaXY+CgoJPD9waHAKCS8qKgoJICogVU0gaG9vawoJICoKCSAqIEB0eXBlIGFjdGlvbgoJICogQHRpdGxlIHVtX21lbWJlcnNfZGlyZWN0b3J5X2Zvb3RlcgoJICogQGRlc2NyaXB0aW9uIE1lbWJlciBkaXJlY3RvcnkgZGlzcGxheSBmb290ZXIKCSAqIEBpbnB1dF92YXJzCgkgKiBbeyJ2YXIiOiIkYXJncyIsInR5cGUiOiJhcnJheSIsImRlc2MiOiJNZW1iZXIgZGlyZWN0b3J5IHNob3J0Y29kZSBhcmd1bWVudHMifV0KCSAqIEBjaGFuZ2VfbG9nCgkgKiBbIlNpbmNlOiAyLjAiXQoJICogQHVzYWdlIGFkZF9hY3Rpb24oICd1bV9tZW1iZXJzX2RpcmVjdG9yeV9mb290ZXInLCAnZnVuY3Rpb25fbmFtZScsIDEwLCAxICk7CgkgKiBAZXhhbXBsZQoJICogPD9waHAKCSAqIGFkZF9hY3Rpb24oICd1bV9tZW1iZXJzX2RpcmVjdG9yeV9mb290ZXInLCAnbXlfbWVtYmVyc19kaXJlY3RvcnlfZm9vdGVyJywgMTAsIDEgKTsKCSAqIGZ1bmN0aW9uIG15X21lbWJlcnNfZGlyZWN0b3J5X2Zvb3RlciggJGFyZ3MgKSB7CgkgKiAgICAgLy8geW91ciBjb2RlIGhlcmUKCSAqIH0KCSAqID8+CgkgKi8KCWRvX2FjdGlvbiggJ3VtX21lbWJlcnNfZGlyZWN0b3J5X2Zvb3RlcicsICRhcmdzLCAkZm9ybV9pZCwgJG5vdF9zZWFyY2hlZCApOyA/PgoKPC9kaXY+CiI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lc3BhY2VzIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGluY2x1ZGVzIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGZ1bmN0aW9ucyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjb25zdGFudHMiO2E6MDp7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY2xhc3NlcyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbnRlcmZhY2VzIjthOjA6e31zOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHRyYWl0cyI7YTowOnt9fQ==";